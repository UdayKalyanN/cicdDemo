pipeline {
    agent {
        docker {
            image 'udaykalyannuthalapati/maven-docker-agent:latest'
            args '-v /var/run/docker.sock:/var/run/docker.sock'
        }
    }

    environment {
        DOCKER_HUB_USERNAME = 'udaykalyannuthalapati'
        DOCKER_IMAGE_BACKEND = "${DOCKER_HUB_USERNAME}/demo-backend:${BUILD_NUMBER}"
        DOCKER_IMAGE_FRONTEND = "${DOCKER_HUB_USERNAME}/demo-frontend:${BUILD_NUMBER}"
        REGISTRY_CREDENTIALS = credentials('dockerhub-credentials')
        GIT_REPO_NAME = "cicdDemo"
        GIT_USER_NAME = "UdayKalyanN"
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', 
                    url: 'https://github.com/UdayKalyanN/cicdDemo.git'
            }
        }

        stage('Build and Test') {
            steps {
                dir('backend') {
                    sh '''
                        echo "Current directory: $(pwd)"
                        echo "Listing contents:"
                        ls -l
                        cat pom.xml
                        mvn --version
                        mvn clean package
                    '''
                }
            }
        }

        stage('Build and Push Docker Images') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'dockerhub-credentials', passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USERNAME')]) {
                        sh '''
                            echo "${DOCKER_PASSWORD}" | docker login -u "${DOCKER_USERNAME}" --password-stdin
                            
                            # Build and push backend image
                            docker build -t ${DOCKER_IMAGE_BACKEND} \
                                       -t ${DOCKER_HUB_USERNAME}/demo-backend:latest \
                                       .
                            docker push ${DOCKER_IMAGE_BACKEND}
                            docker push ${DOCKER_HUB_USERNAME}/demo-backend:latest
                            
                            # Build and push frontend image
                            cd frontend
                            docker build -t ${DOCKER_IMAGE_FRONTEND} \
                                       -t ${DOCKER_HUB_USERNAME}/demo-frontend:latest \
                                       .
                            docker push ${DOCKER_IMAGE_FRONTEND}
                            docker push ${DOCKER_HUB_USERNAME}/demo-frontend:latest
                        '''
                    }
                }
            }
            post {
                always {
                    sh 'docker logout'
                }
            }
        }

        stage('Update Deployment Files') {
            steps {
                withCredentials([string(credentialsId: 'github-token', variable: 'GITHUB_TOKEN')]) {
                    sh '''
                        git config user.email "nudaykalyan06@gmail.com"
                        git config user.name "UdayKalyanN"
                        
                        sed -i "s|image: ${DOCKER_HUB_USERNAME}/demo-backend:.*|image: ${DOCKER_HUB_USERNAME}/demo-backend:${BUILD_NUMBER}|g" ci-cd-manifests/backend-deployment.yaml
                        sed -i "s|image: ${DOCKER_HUB_USERNAME}/demo-frontend:.*|image: ${DOCKER_HUB_USERNAME}/demo-frontend:${BUILD_NUMBER}|g" ci-cd-manifests/frontend-deployment.yaml
                        
                        git add ci-cd-manifests/backend-deployment.yaml ci-cd-manifests/frontend-deployment.yaml
                        git commit -m "Update deployment images to version ${BUILD_NUMBER}"
                        git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
                    '''
                }
            }
        }
    }

    post {
        success {
            echo '✅ Pipeline succeeded'
            echo "Backend Image: ${DOCKER_IMAGE_BACKEND}"
            echo "Frontend Image: ${DOCKER_IMAGE_FRONTEND}"
        }
        failure {
            echo '❌ Pipeline failed'
        }
    }
}