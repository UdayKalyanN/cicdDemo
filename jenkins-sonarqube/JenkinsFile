pipeline {
    agent any
    
    environment {
        DOCKER_REGISTRY_CREDENTIALS = 'dockerhub-credentials'
        DOCKER_HUB_USERNAME = 'udaykalyannuthalapati'
        VERSION = "${env.BUILD_NUMBER}"
        GIT_REPO_NAME = "cicdDemo"
        GIT_USER_NAME = "UdayKalyanN"
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        
        stage('Build & Test') {
            steps {
                sh '''
                    mvn clean package \
                        -DskipTests=false \
                        -Dmaven.test.failure.ignore=false
                '''
            }
            post {
                always {
                    junit '**/target/surefire-reports/*.xml'
                }
            }
        }
        
        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('My Sonar') {
                    sh '''
                        mvn sonar:sonar \
                            -Dsonar.projectKey=${JOB_NAME} \
                            -Dsonar.projectName=${JOB_NAME} \
                            -Dsonar.projectVersion=${VERSION}
                    '''
                }
                timeout(time: 2, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }
        
        stage('Docker Build & Push') {
            steps {
                script {
                    // Login to Docker Hub using credentials
                    withCredentials([usernamePassword(credentialsId: env.DOCKER_REGISTRY_CREDENTIALS, passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USERNAME')]) {
                        sh "docker login -u ${DOCKER_USERNAME} -p ${DOCKER_PASSWORD}"
                        
                        // Build and push backend
                        def backendImageName = "${env.DOCKER_HUB_USERNAME}/demo-backend"
                        sh """
                            docker build -t ${backendImageName}:${VERSION} \
                                       -t ${backendImageName}:latest \
                                       --build-arg BUILD_VERSION=${VERSION} \
                                       --build-arg BUILD_DATE=\$(date -u +'%Y-%m-%dT%H:%M:%SZ') \
                                       .
                            docker push ${backendImageName}:${VERSION}
                            docker push ${backendImageName}:latest
                        """
                        
                        // Build and push frontend
                        dir('frontend') {
                            def frontendImageName = "${env.DOCKER_HUB_USERNAME}/demo-frontend"
                            sh """
                                docker build -t ${frontendImageName}:${VERSION} \
                                           -t ${frontendImageName}:latest \
                                           --build-arg BUILD_VERSION=${VERSION} \
                                           --build-arg BUILD_DATE=\$(date -u +'%Y-%m-%dT%H:%M:%SZ') \
                                           .
                                docker push ${frontendImageName}:${VERSION}
                                docker push ${frontendImageName}:latest
                            """
                        }
                    }
                }
            }
            post {
                always {
                    sh 'docker logout'
                }
            }
        }

        stage('Clone Config Repo') {
            steps {
                script {
                    // Backup current directory
                    sh 'pwd > pwd.tmp'
                    
                    // Clone the config repository
                    dir('config-repo') {
                        git branch: 'main',
                            url: "https://github.com/${GIT_USER_NAME}/${GIT_REPO_NAME}.git"
                    }
                }
            }
        }

        stage('Update Deployment Files') {
            steps {
                script {
                    // Move to config repo directory
                    dir('config-repo') {
                        withCredentials([string(credentialsId: 'github-token', variable: 'GITHUB_TOKEN')]) {
                            sh """
                                git config user.email "nudaykalyan06@gmail.com"
                                git config user.name "UdayKalyanN"
                                
                                # Update backend deployment image tag
                                sed -i '' "s|image: udaykalyannuthalapati/demo-backend:.*|image: udaykalyannuthalapati/demo-backend:${VERSION}|g" ci-cd-manifests/backend-deployment.yaml
                                
                                # Update frontend deployment image tag
                                sed -i '' "s|image: udaykalyannuthalapati/demo-frontend:.*|image: udaykalyannuthalapati/demo-frontend:${VERSION}|g" ci-cd-manifests/frontend-deployment.yaml
                                
                                # Stage the changes
                                git add ci-cd-manifests/backend-deployment.yaml ci-cd-manifests/frontend-deployment.yaml
                                
                                # Commit and push if there are changes
                                if git diff --staged --quiet; then
                                    echo "No changes to commit"
                                else
                                    git commit -m "Update deployment images to version ${VERSION}"
                                    git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
                                fi
                            """
                        }
                    }
                }
            }
            post {
                always {
                    // Clean up cloned repository
                    sh '''
                        rm -rf config-repo
                        if [ -f pwd.tmp ]; then
                            cd $(cat pwd.tmp)
                            rm pwd.tmp
                        fi
                    '''
                }
            }
        }
    }
    
    post {
        always {
            cleanWs()
        }
        success {
            echo '✅ Pipeline succeeded'
            slackSend(
                color: 'good',
                message: """
                    Build Successful!
                    Job: ${env.JOB_NAME}
                    Build Number: ${VERSION}
                    Images Updated:
                    - ${DOCKER_HUB_USERNAME}/demo-backend:${VERSION}
                    - ${DOCKER_HUB_USERNAME}/demo-frontend:${VERSION}
                    
                    Deployment files have been updated in the repository.
                """
            )
        }
        failure {
            echo '❌ Pipeline failed'
            mail(
                to: 'nudaykalyan06@gmail.com',
                subject: "Build #${VERSION} Failed - ${env.JOB_NAME}",
                body: """
                    Job: ${env.JOB_NAME}
                    Build Number: ${VERSION}
                    Build URL: ${env.BUILD_URL}
                    
                    Please check Jenkins for more details.
                """
            )
        }
    }
}